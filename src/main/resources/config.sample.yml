database:
    # the url where to find the database
    url: jdbc:mysql://localhost:3306/crowdcontrol

    # dialekt to use for communication
    dialect: MYSQL

    # the writing user
    writing:
        user: root
        password:

    # readonly user should really just be readonly
    readonly:
        user: root
        password:

# Deployment of object service, control-ui, worker-ui
deployment:
    # Origin of the control-ui
    # port has to match the url of the ui and no / at the end
    origin: http://localhost:3000

    # the url to the workerService
    workerService: https://worker.example.com

    # the url to the root of the worker-ui. No / at the end.
    # Object service will append particular file names like "/taskPresenter.html"
    workerUi: https://workerui.example.com

# the defined platforms to run
platforms :
    # type to use (mturk/pybossa/dummy)
    - type: dummy

      # standard credentials
      user: samplePlatformUser
      password: samplePassword

      # name which is used to display
      name: Sandbox

      # the url to give to the platform type
      url: http://example.com/

    - type: pybossa
      # the key to access the pybossa api
      apiKey: 8ec92fa1-1bd1-42ad-8524-3d2bab4588b1
      # the url to the pybossa api
      url: http://localhost:5000/api
      name: Pybossa
      # the id of the pybossa project to use for all experiments
      projectId: 1
      # if calibrations are allowed on this platform
      calibrationsAllowed: true

moneytransfer:
    #the minimum amount of money in ct a worker has to earn, before he gets paid off
    payOffThreshold: 0

    #the password used, to verify a valid amazon giftcode email (enter password as message at amazon homepage, while buying giftcodes
    parsingPassword: test

    #the mail address to send notification mails to
    notificationMailAddress: pseipd@gmail.com

    #the interval in days, when the workers get paid off
    scheduleInterval: 7
